import { LitElement } from 'lit';

type DssTabItem = {
    id: string;
    text: string;
    panel: string;
    selected?: boolean;
    disabled?: boolean;
    disableEdit?: boolean;
    disableDelete?: boolean;
    isEditing?: boolean;
};
export declare class TabsList extends LitElement {
    static get styles(): import('lit').CSSResult[];
    private _handleUpdateArrowsBound;
    constructor();
    connectedCallback(): void;
    disconnectedCallback(): void;
    set dssTabsId(value: string);
    get dssTabsId(): string;
    set label(value: string);
    get label(): string;
    set tabs(data: DssTabItem[]);
    get tabs(): DssTabItem[];
    set addTabText(value: string);
    get addTabText(): string;
    set addTabEnabled(value: boolean);
    get addTabEnabled(): boolean;
    canOrder: boolean;
    canEdit: boolean;
    canDelete: boolean;
    fullHeight: boolean;
    _isEditing: boolean;
    _focusedIndex: number | null;
    get _wrapper(): HTMLElement | undefined;
    get _header(): HTMLElement | undefined;
    get _menu(): HTMLElement | undefined;
    get _prevScroll(): HTMLElement | undefined;
    get _nextScroll(): HTMLElement | undefined;
    _dssTabsId: string;
    _label: string;
    _tabs: DssTabItem[];
    _tabsElements: NodeListOf<Element>;
    _firstTab: Element;
    _lastTab: Element;
    _addTabEnabled: boolean;
    _addTabText: string;
    updated(changedProperties: Map<string, any>): void;
    changeTabWatch(): Promise<void>;
    setFirstAndLastTabs(): void;
    changeTab(selectedTab: DssTabItem): void;
    updateTabs(selectedTabId: string): void;
    updatePanels(selectedPanel: string): void;
    _handleKeydown(event: Event): void;
    moveFocusToTab(currentTab: any): void;
    moveFocusToPreviousTab(currentTab: any): void;
    moveFocusToNextTab(currentTab: any): void;
    setSelectedTab(currentTab: any): void;
    selectTab(tabId: string): void;
    _centerTabIntoScroll(tab: any): void;
    addNewTab(): void;
    _updateArrows(): void;
    _scrollMenu(direction: number): void;
    firstUpdated(): Promise<void>;
    render(): import('lit-html').TemplateResult;
    _handleEdit(currentTab: DssTabItem): void;
    _handleDelete(tab: DssTabItem): void;
    _handleEditSave(currentTab: DssTabItem): void;
    _handleEditCancel(currentTab: DssTabItem): void;
    _handleEditFocusout(event: FocusEvent, tab: DssTabItem): void;
    _handleEditCancelFocusout(event: FocusEvent, currentTab: DssTabItem): void;
    _handleEditKeydown(event: KeyboardEvent, currentTab: DssTabItem): void;
    _dispatchEditTabs(): void;
    draggedIndex: number | null;
    _lastOverEl: HTMLElement | null;
    onDragStart(e: DragEvent, index: number): void;
    onDragEnd(e: DragEvent): void;
    onDragOver(e: DragEvent): void;
    onDragLeave(e: DragEvent): void;
    onDrop(e: DragEvent, index: number): void;
    dispatchOrder(): void;
    onItemFocus(index: number): void;
    onItemBlur(e: FocusEvent, index: number): void;
}
export {};
