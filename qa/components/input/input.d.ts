import { LitElement } from 'lit';

export declare class Input extends LitElement {
    static get styles(): import('lit').CSSResult[];
    get _input(): HTMLInputElement;
    get _labelSlot(): HTMLInputElement;
    set label(label: string);
    get label(): string;
    maskRegex: string | undefined;
    maskReplace: string | undefined;
    allowedChars: string | undefined;
    icon: string;
    inputSize: string;
    units: string | undefined;
    inputPrefix: string | undefined;
    set helpText(text: string);
    get helpText(): string;
    set invalid(status: boolean);
    get invalid(): boolean;
    set removeMinWidth(value: boolean);
    get removeMinWidth(): boolean;
    set value(value: string);
    get value(): string;
    _label: string;
    _placeholder: string;
    _maxLength: number | undefined;
    _invalid: boolean;
    _helpText: string;
    _isFocused: boolean;
    _isTypeNumeric: boolean;
    _inputValidity: boolean;
    _removeMinWidth: boolean;
    observerConfig: {
        attributes: boolean;
        childList: boolean;
        subtree: boolean;
    };
    callback: (mutationList: any) => void;
    observer: MutationObserver;
    disconnectedCallback(): void;
    _handleClick(): void;
    _previousValue: string | undefined;
    _handleInput(): void;
    _handleFocusIn(): void;
    _handleFocusOut(): void;
    _focusInput(): void;
    _handleValidity(): void;
    _stepUp(): void;
    _stepDown(): void;
    _dispatchValueChange(): void;
    _checkInputAttributes(): void;
    _isTruncated: boolean;
    _checkInputOverflow(): void;
    private intervalId;
    _onHold(action: string): void;
    _stopHold(): void;
    firstUpdated(): Promise<void>;
    render(): import('lit-html').TemplateResult;
}
