import { LitElement } from 'lit';
import { OptionItem } from '../../utils/property-types';

export declare class SelectDropdown extends LitElement {
    static get styles(): import('lit').CSSResult[];
    static get parts(): {
        dropdown: string;
    };
    static formAssociated: boolean;
    private internals;
    get value(): string;
    set value(val: string);
    _input: HTMLInputElement;
    _label: HTMLLabelElement;
    elements: OptionItem[] | null;
    selectedValue: string[] | null;
    size: string;
    icon: string;
    label: string;
    placeholder: string;
    placeholderOnDropdown: string;
    placeholderIfEmpty: string;
    helpText: string | undefined;
    type: string;
    required: boolean;
    disabled: boolean;
    readonly: boolean;
    invalid: boolean;
    multiple: boolean;
    tick: boolean;
    unorder: boolean;
    deselectable: boolean;
    boxStyle: string;
    selectorStyle: string;
    labelSelectAll: string;
    labelDeselectAll: string;
    filterThreshold: number;
    searchThreshold: number;
    selectAll: boolean;
    showDropdown: boolean;
    openWithSearch: boolean;
    dropdownOffsetX: number | undefined;
    dropdownOffsetY: number | undefined;
    dropdownPlacement: string;
    dropdownFixed: boolean;
    _isFiltering: boolean;
    _isFocused: boolean;
    _isTruncated: boolean;
    _inputValidity: boolean;
    _placeholder: string;
    _elements: OptionItem[];
    _copyElements: OptionItem[];
    _filteredElements: OptionItem[];
    _selectElements: number;
    _popperInstance: any;
    constructor();
    disconnectedCallback(): void;
    render(): import('lit-html').TemplateResult;
    _addListenerClickOutside(): void;
    _removeListenerClickOutside(): void;
    _handleClickOutside(event: any): void;
    protected updated(changed: Map<string, any>): void;
    protected firstUpdated(): Promise<void>;
    private _enableAnimations;
    private _initializeElements;
    private _setupSearchMode;
    private _applyOpenWithSearch;
    private _applyElements;
    private _applySelectedValue;
    private _getSelectedElements;
    private _getFilteredElements;
    private _filterSelected;
    private _initSelectedElements;
    _showSelectedValues(values: string[]): void;
    private _reorderElements;
    private _updateInputValue;
    _checkInputOverflow(): void;
    _handleClick(): void;
    _handleInput(): void;
    _handleFocusIn(): void;
    _handleFocusOut(event: any): void;
    _handleBlurEsc(): void;
    _handleKeyDown(e: KeyboardEvent): void;
    _cleanInput(): void;
    _keyboardFilterMatch(): void;
    _showPlaceholder(): void;
    _hidePlaceholder(): void;
    _handleValidity(): void;
    _handleSelectorChange(e: CustomEvent): void;
    _handleBlurSelector(dropdown: any, event: any): void;
    _dispatchValueChange(): void;
    _createPopperDropdown(): void;
    _updatePopperDropdown(): void;
    _toggleDropdown(): void;
    _closeDropdown(): void;
}
