import { LitElement } from 'lit';

export type SelectorElement = {
    label: string;
    value: string;
};
export declare class InputDropdown extends LitElement {
    static get styles(): import('lit').CSSResult[];
    private get _input();
    private get _label();
    dropdownOffsetX: number | undefined;
    dropdownOffsetY: number | undefined;
    set icon(icon: string);
    get icon(): string;
    set placeHolder(placeHolder: string);
    get placeHolder(): string;
    set unorder(multiple: boolean);
    get unorder(): boolean;
    set elements(elements: Array<SelectorElement>);
    get elements(): Array<SelectorElement>;
    set multiple(multiple: boolean);
    get multiple(): boolean;
    set tick(tick: boolean);
    get tick(): boolean;
    set openWithSearch(openWithSearch: boolean);
    get openWithSearch(): boolean;
    set showDropdown(state: boolean);
    get showDropdown(): boolean;
    set deselectable(deselectable: boolean);
    get deselectable(): boolean;
    set selectedValue(elements: string[]);
    get selectedValue(): string[];
    set type(value: string);
    get type(): string;
    set boxStyle(boxStyle: string);
    get boxStyle(): string;
    set selectorStyle(style: string);
    get selectorStyle(): string;
    set labelSelectAll(labelSelectAll: string);
    get labelSelectAll(): string;
    set labelDeselectAll(labelDeselectAll: string);
    get labelDeselectAll(): string;
    set selectAll(selectAll: boolean);
    get selectAll(): boolean;
    set invalid(invalid: boolean);
    get invalid(): boolean;
    set inputSize(size: string);
    get inputSize(): string;
    set helpText(text: string);
    get helpText(): string;
    set dropdownPlaceholder(placeholder: string);
    get dropdownPlaceholder(): string;
    set placeholderEmpty(placeholder: string);
    get placeholderEmpty(): string;
    set filterThreshold(value: number);
    get filterThreshold(): number;
    set searchThreshold(value: number);
    get searchThreshold(): number;
    set value(value: string);
    dropdownPlacement: string;
    dropdownFixed: boolean;
    get value(): string;
    private _elements;
    private _copyElements;
    private _tick;
    private _type;
    private _boxStyle;
    private _selectedValue;
    private _multiple;
    private _openWithSearch;
    private _deselectable;
    private _icon;
    private _placeHolder;
    private _showDropdown;
    private _required;
    private _disabled;
    private _readonly;
    private _labelSelectAll;
    private _labelDeselectAll;
    private _selectAll;
    private _selectElements;
    private _isFocused;
    private _helpText;
    private _invalid;
    private _inputSize;
    private _inputValidity;
    private _filteredElements;
    private _dropdownPlaceholder;
    private _selectorStyle;
    private _isFiltering;
    private _placeholderEmpty;
    private _filterThreshold;
    private _searchThreshold;
    private _unorder;
    _popperInstance: any;
    constructor();
    disconnectedCallback(): void;
    _addOutsideClickListener(): void;
    _removeOutsideClickListener(): void;
    _handleOutsideClick(event: any): void;
    _closeDropdown(): void;
    private observerConfig;
    private callback;
    private observer;
    private visibleObserver;
    private _getFilteredElements;
    firstUpdated(): Promise<void>;
    private _initElementsSelected;
    private _clickedOutsideDropdown;
    private _handleInput;
    private _handleBlurEsc;
    private _handleBlurSelector;
    private _toggleDropdown;
    private _dispatchValueChange;
    private _onSelectorChanges;
    private _showSelectValuesInInput;
    private _checkInputAttributes;
    private _handleFocusIn;
    private _handleFocusOut;
    private _handleKeyDown;
    private _handleClick;
    private _focusInput;
    private _showPlaceholder;
    private _hidePlaceholder;
    private _handleValidity;
    private _cleanInput;
    private findScrollParent;
    private _createPopperDropdown;
    private _updatePopperDropdown;
    render(): import('lit-html').TemplateResult;
}
