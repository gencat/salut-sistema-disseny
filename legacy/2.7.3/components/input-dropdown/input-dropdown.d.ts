import { LitElement } from 'lit';

export type SelectorElement = {
    label: string;
    value: string;
};
export declare class InputDropdown extends LitElement {
    static get styles(): import('lit').CSSResult[];
    get _input(): HTMLInputElement;
    get _label(): HTMLElement;
    dropdownOffsetX: number | undefined;
    dropdownOffsetY: number | undefined;
    icon: string;
    set placeHolder(placeHolder: string);
    get placeHolder(): string;
    set unorder(multiple: boolean);
    get unorder(): boolean;
    set elements(elements: Array<SelectorElement>);
    get elements(): Array<SelectorElement>;
    set multiple(multiple: boolean);
    get multiple(): boolean;
    set tick(tick: boolean);
    get tick(): boolean;
    set openWithSearch(openWithSearch: boolean);
    get openWithSearch(): boolean;
    set showDropdown(state: boolean);
    get showDropdown(): boolean;
    set deselectable(deselectable: boolean);
    get deselectable(): boolean;
    set selectedValue(elements: string[]);
    get selectedValue(): string[];
    set type(value: string);
    get type(): string;
    set boxStyle(boxStyle: string);
    get boxStyle(): string;
    set selectorStyle(style: string);
    get selectorStyle(): string;
    set labelSelectAll(labelSelectAll: string);
    get labelSelectAll(): string;
    set labelDeselectAll(labelDeselectAll: string);
    get labelDeselectAll(): string;
    set selectAll(selectAll: boolean);
    get selectAll(): boolean;
    set invalid(invalid: boolean);
    get invalid(): boolean;
    inputSize: string;
    set helpText(text: string);
    get helpText(): string;
    set dropdownPlaceholder(placeholder: string);
    get dropdownPlaceholder(): string;
    set placeholderEmpty(placeholder: string);
    get placeholderEmpty(): string;
    set filterThreshold(value: number);
    get filterThreshold(): number;
    set searchThreshold(value: number);
    get searchThreshold(): number;
    set value(value: string);
    dropdownPlacement: string;
    dropdownFixed: boolean;
    get value(): string;
    _elements: Array<SelectorElement> | null;
    _copyElements: Array<SelectorElement> | null;
    _tick: boolean;
    _type: string;
    _boxStyle: string | null;
    _selectedValue: string[] | null;
    _multiple: boolean;
    _openWithSearch: boolean;
    _deselectable: boolean;
    _placeHolder: string;
    _showDropdown: boolean;
    _required: boolean;
    _disabled: boolean;
    _readonly: boolean;
    _labelSelectAll: string;
    _labelDeselectAll: string;
    _selectAll: boolean;
    _selectElements: number;
    _isFocused: boolean;
    _helpText: string;
    _invalid: boolean;
    _inputValidity: boolean;
    _filteredElements: SelectorElement[] | null | undefined;
    _dropdownPlaceholder: string;
    _selectorStyle: string;
    _isFiltering: boolean;
    _placeholderEmpty: string;
    _filterThreshold: number;
    _searchThreshold: number;
    _unorder: boolean;
    _popperInstance: any;
    constructor();
    disconnectedCallback(): void;
    _addOutsideClickListener(): void;
    _removeOutsideClickListener(): void;
    _handleOutsideClick(event: any): void;
    _closeDropdown(): void;
    private observerConfig;
    private callback;
    private observer;
    private visibleObserver;
    _getFilteredElements(): SelectorElement[] | null | undefined;
    firstUpdated(): Promise<void>;
    _initElementsSelected(): void;
    _isTruncated: boolean;
    _checkInputOverflow(): void;
    _clickedOutsideDropdown(dropdown: any, event: any): void;
    _handleInput(): void;
    _handleBlurEsc(): void;
    _handleBlurSelector(dropdown: any, event: any): void;
    _toggleDropdown(): void;
    _getSelectedItems(): SelectorElement[] | undefined;
    _dispatchValueChange(): void;
    _onSelectorChanges(e: CustomEvent): void;
    _showSelectValuesInInput(e: any[]): void;
    _checkInputAttributes(): void;
    _handleFocusIn(): void;
    _handleFocusOut(event: any): void;
    _handleKeyDown(e: KeyboardEvent): void;
    _handleClick(): void;
    _focusInput(): void;
    _keyboardFilterMatch(): void;
    _showPlaceholder(): void;
    _hidePlaceholder(): void;
    _handleValidity(): void;
    _cleanInput(): void;
    _createPopperDropdown(): void;
    _updatePopperDropdown(): void;
    render(): import('lit-html').TemplateResult;
}
