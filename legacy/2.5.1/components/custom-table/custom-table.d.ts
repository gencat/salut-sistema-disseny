import { LitElement, TemplateResult } from 'lit';

export interface IFilter {
    value: string;
    icon: string;
}
export interface IColumnHeader {
    column: string;
    label: string;
    style?: string;
    align?: string;
    srOnly?: boolean;
    sortType?: 'number' | 'date' | 'string';
    sortOrder?: 'asc' | 'desc' | 'none';
    highlight?: boolean;
    renderTemplate?: () => HTMLElement | TemplateResult;
}
export declare class CustomTable extends LitElement {
    static get styles(): import('lit').CSSResult[];
    internalSelectedCounter: number;
    set hideHeader(value: boolean);
    get hideHeader(): boolean;
    set hidePaginator(value: boolean);
    get hidePaginator(): boolean;
    set columnsHeader(data: Array<IColumnHeader>);
    get columnsHeader(): Array<IColumnHeader>;
    set data(data: Array<any>);
    get data(): Array<any>;
    set multiselect(value: boolean);
    get multiselect(): boolean;
    set radioselect(value: boolean);
    get radioselect(): boolean;
    set selectedRowsLabel(value: string);
    get selectedRowsLabel(): string;
    set selectedRowsCounter(value: number);
    get selectedRowsCounter(): number;
    showConfig: boolean;
    configTableLabel: string;
    private _hideHeader;
    private _hidePaginator;
    private _columnsHeader;
    private _data;
    private _paginatedData;
    private _currentSortColumn;
    private _currentSortType;
    private _currentSortOrder;
    private _multiselect;
    private _radioselect;
    private _allRowsSelected;
    private _selectedRowsLabel;
    private _isFirstUpdate;
    private _shouldUpdate;
    private _table;
    private _currentRowsChecked;
    private _selectedRowsCounter;
    set tableTitle(value: string);
    get tableTitle(): string;
    set filters(filters: Array<any>);
    get filters(): Array<any>;
    set innerFilters(value: boolean);
    get innerFilters(): boolean;
    set expandTable(value: boolean);
    get expandTable(): boolean;
    set expandLabel(value: string);
    get expandLabel(): string;
    set collapseLabel(value: string);
    get collapseLabel(): string;
    set filtersLabel(value: string);
    get filtersLabel(): string;
    set cleanFiltersLabel(value: string);
    get cleanFiltersLabel(): string;
    set noFiltersLabel(value: string);
    get noFiltersLabel(): string;
    set hideHeaderTitleAndExpand(value: boolean);
    get hideHeaderTitleAndExpand(): boolean;
    set disableSorting(value: boolean);
    get disableSorting(): boolean;
    private _tableTitle;
    private _filters;
    private _innerFilters;
    private _expandTable;
    private _expandLabel;
    private _collapseLabel;
    private _filtersLabel;
    private _cleanFiltersLabel;
    private _noFiltersLabel;
    private _isTableHeaderCreated;
    private _hideHeaderTitleAndExpand;
    private _disableSorting;
    set totalResults(value: number);
    get totalResults(): number;
    set currentIndex(value: number);
    get currentIndex(): number;
    set pageSize(value: number);
    get pageSize(): number;
    set pageSizeOptions(pageSizeOptions: Array<number>);
    get pageSizeOptions(): Array<number>;
    set resultsLabel(value: string);
    get resultsLabel(): string;
    set rowsPerPageLabel(value: string);
    get rowsPerPageLabel(): string;
    set hidePaginationResults(value: boolean);
    get hidePaginationResults(): boolean;
    set pageSizeOptionsDisabled(value: boolean);
    get pageSizeOptionsDisabled(): boolean;
    set hideFooter(value: boolean);
    get hideFooter(): boolean;
    private _isPaginationStarted;
    private _totalResults;
    private _currentIndex;
    private _pageSize;
    private _pageSizeOptions;
    private _resultstext;
    private _rowsperpagetext;
    private _paginationState;
    private _pageSizeOptionsDisabled;
    private _hidePaginationResults;
    private _hideFooter;
    fixedColumnsBefore: undefined;
    fixedColumnsAfter: undefined;
    tableInfo: undefined;
    private _getDataLength;
    private _sortBy;
    private _updateColumnSortState;
    private _onSelectAll;
    private _rowsCheckedListener;
    private _updateTableFooterRowsChecked;
    private _updateTableHeader;
    private _generateTableHeaderHTML;
    private _getTableHeaderSortIconHTML;
    private _updateTableHeaderIcons;
    private _paginate;
    private _rowKeydownListener;
    private _dispatchChangeFilters;
    private _dispatchExpandTable;
    private _dispatchOpenFilters;
    private _dispatchPagination;
    private _dispatchSort;
    private _dispatchMultiselect;
    private _initTable;
    private _checkAllRowsSelected;
    private _fixColumns;
    private _cellsToSticky;
    _initScrollX(element: HTMLElement): void;
    _handleScrollX(event: Event): void;
    firstUpdated(): Promise<void>;
    willUpdate(changedProperties: any): void;
    render(): TemplateResult;
}
