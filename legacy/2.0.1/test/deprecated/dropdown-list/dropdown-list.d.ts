import { LitElement } from 'lit';

export type SelectorElement = {
    label: string;
    value: string;
};
export declare class DropDownList extends LitElement {
    static get styles(): import('lit').CSSResult;
    get _input(): HTMLInputElement;
    get _DSSinput(): HTMLInputElement;
    set icon(icon: string);
    get icon(): string;
    set label(label: string);
    get label(): string;
    set placeHolder(placeHolder: string);
    get placeHolder(): string;
    set required(required: boolean);
    get required(): boolean;
    set disabled(disabled: boolean);
    get disabled(): boolean;
    set readonly(readonly: boolean);
    get readonly(): boolean;
    set elements(elements: Array<SelectorElement>);
    get elements(): Array<SelectorElement>;
    set multiple(multiple: boolean);
    get multiple(): boolean;
    set openWithSearch(openWithSearch: boolean);
    get openWithSearch(): boolean;
    set tick(tick: boolean);
    get tick(): boolean;
    set deselectable(deselectable: boolean);
    get deselectable(): boolean;
    set selectedValue(elements: string[]);
    get selectedValue(): string[];
    set type(value: string);
    get type(): string;
    set boxStyle(boxStyle: string);
    get boxStyle(): string;
    set inputStyle(inputStyle: string);
    get inputStyle(): string;
    set labelSelectAll(labelSelectAll: string);
    get labelSelectAll(): string;
    set labelDeselectAll(labelDeselectAll: string);
    get labelDeselectAll(): string;
    set SelectAll(selectAll: boolean);
    get SelectAll(): boolean;
    private _elements;
    private _copyElements;
    private _tick;
    private _type;
    private _style;
    private _boxStyle;
    private _inputStyle;
    private _selectedValue;
    private _multiple;
    private _openWithSearch;
    private _deselectable;
    private _icon;
    private _label;
    private _placeHolder;
    private _showSelector;
    private _required;
    private _disabled;
    private _readonly;
    private _labelSelectAll;
    private _labelDeselectAll;
    private _selectAll;
    private _selectElements;
    private _isFocused;
    private _isGroupFocusedVisible;
    private get _filteredElements();
    private get _showPlaceHolder();
    firstUpdated(): Promise<void>;
    private _initElementsSelected;
    private _clickedOutsideDropdown;
    private _handleInput;
    private _handleFocus;
    private _handleBlurEsc;
    private _handleBlur;
    private _handleBlurComponent;
    private _onCancel;
    private _cleanInput;
    private _onclick;
    private _handleKeyInput;
    private _dispatchValueChange;
    private _onSelectorChanges;
    private _showSelectValuesInInput;
    private _evalueFocus;
    private _handleKeyup;
    private _handelLabelClick;
    render(): import('lit-html').TemplateResult<1>;
}
