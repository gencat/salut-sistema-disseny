import { LitElement } from 'lit';

export type DssTimepickerOption = {
    value: string;
    state: string;
};
export declare class Datepicker_ extends LitElement {
    static get styles(): import('lit').CSSResult[];
    get _input(): HTMLInputElement;
    get _labelSlot(): HTMLInputElement;
    get _label(): HTMLElement;
    set showTime(showTime: boolean);
    get showTime(): boolean;
    set showButtons(showButtons: boolean);
    get showButtons(): boolean;
    set leftLabel(leftLabel: string);
    get leftLabel(): string;
    set rightLabel(rightLabel: string);
    get rightLabel(): string;
    set minDate(minDate: string);
    get minDate(): string;
    set maxDate(maxDate: string);
    get maxDate(): string;
    set invalid(invalid: boolean);
    get invalid(): boolean;
    set inputSize(size: string);
    get inputSize(): string;
    set helpText(text: string);
    get helpText(): string;
    set timepicker(value: string);
    get timepicker(): string;
    set minutesRange(value: number);
    get minutesRange(): number;
    set minHour(value: number);
    get minHour(): number;
    set maxHour(value: number);
    get maxHour(): number;
    set customTimeListOptions(options: DssTimepickerOption[]);
    get customTimeListOptions(): DssTimepickerOption[];
    set timepickerLabel(label: string);
    get timepickerLabel(): string;
    set value(value: string);
    get value(): string;
    set icon(icon: string);
    get icon(): string;
    dropdownPlacement: string;
    _timepickerLabel: string;
    _timepicker: string;
    _minutesRange: number;
    _minHour: number;
    _maxHour: number;
    _customTimeListOptions: DssTimepickerOption[];
    _icon: string;
    _placeholder: string;
    _externalPlaceholder: string;
    _previousDate: string;
    _minDate: string;
    _maxDate: string;
    _showCalendar: boolean;
    _showTime: boolean;
    _invalid: boolean;
    _showButtons: boolean;
    _required: boolean;
    _disabled: boolean;
    _readonly: boolean;
    _leftLabel: string;
    _rightLabel: string;
    _isFocused: boolean;
    _helpText: string;
    _inputSize: string;
    _inputValidity: boolean;
    _popperInstance: any;
    constructor();
    disconnectedCallback(): void;
    _addCalendarListener(): void;
    _removeCalendarListener(): void;
    _handleOutsideClick(event: any): void;
    _handleFocusOut(event: FocusEvent): void;
    observerConfig: {
        attributes: boolean;
        childList: boolean;
        subtree: boolean;
    };
    callback: (mutationList: any) => void;
    observer: MutationObserver;
    private visibleObserver;
    firstUpdated(): Promise<void>;
    _createPopperCalendar(): void;
    _checkInputAttributes(): void;
    _handleValidity(): void;
    _checkClickOutside(event: Event): void;
    _checkFocusOut(event: FocusEvent): void;
    _closeCalendar(): void;
    _handleKeyUp(e: KeyboardEvent): void;
    _handleInput(event: any): void;
    _formatDate(value: string): string;
    _handleFocus(): void;
    _handleBlur(): void;
    _focusInput(): void;
    _handleClick(): void;
    _onDateChange(e: CustomEvent): void;
    _onCancel(): void;
    _dispatchValueChange(): void;
    render(): import('lit-html').TemplateResult;
}
