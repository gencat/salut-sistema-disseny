import { LitElement, nothing } from 'lit';

export interface IFilter {
    value: string;
    icon: string;
}
export declare class CustomTableHeader extends LitElement {
    static get styles(): import('lit').CSSResult[];
    private _handleResizeBound;
    constructor();
    connectedCallback(): void;
    disconnectedCallback(): void;
    private _resizeTimer;
    private _handleResize;
    tableInfo: undefined;
    showConfig: boolean;
    configTableLabel: string;
    set filters(filters: Array<any>);
    get filters(): Array<any>;
    set tableTitle(value: string);
    get tableTitle(): string;
    set hidetableTitleAndExpand(value: boolean);
    get hidetableTitleAndExpand(): boolean;
    set innerFilters(value: boolean);
    get innerFilters(): boolean;
    set expandTable(value: boolean);
    get expandTable(): boolean;
    set expandLabel(value: string);
    get expandLabel(): string;
    set collapseLabel(value: string);
    get collapseLabel(): string;
    set rowsOnCollapsed(value: number);
    get rowsOnCollapsed(): number;
    set filtersLabel(value: string);
    get filtersLabel(): string;
    set cleanFiltersLabel(value: string);
    get cleanFiltersLabel(): string;
    set noFiltersLabel(value: string);
    get noFiltersLabel(): string;
    hideActionExpand: boolean;
    showActionFilters: boolean;
    filtersVariant: string;
    filtersPopoverTitle: string;
    jcef: boolean;
    filtersPopoverFixed: boolean;
    customActions: boolean;
    _filters: string[] | IFilter[] | undefined;
    _visibleFilters: any;
    _hiddenFilters: any;
    _filtersExpanded: boolean;
    _filtersShowMore: boolean;
    _tableTitle: string;
    _innerFilters: boolean;
    _expandTable: boolean;
    _expandLabel: string;
    _collapseLabel: string;
    _rowsOnCollapsed: number;
    _filtersLabel: string;
    _cleanFiltersLabel: string;
    _openFiltersLabel: string;
    _noFiltersLabel: string;
    _hidetableTitleAndExpand: boolean;
    _generateFilterChips(filters: string[] | IFilter[]): (import('lit-html').TemplateResult | typeof nothing)[] | undefined;
    _clearFilters(): void;
    _emitExpandAction(): void;
    _emitOpenFilters(): void;
    _emitConfigTable(): void;
    _emitChangeFilters(): void;
    _splitFiltersByLine(): void;
    _filtersToggleMore(): void;
    _checkInnerFiltersOverflow(): void;
    filtersPopoverClose(): void;
    firstUpdated(): Promise<void>;
    render(): import('lit-html').TemplateResult;
}
