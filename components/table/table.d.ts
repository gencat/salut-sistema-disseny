import { LitElement } from 'lit';

export interface IFilter {
    value: string;
    icon: string;
}
export interface ITableColumnHeader {
    title: string;
    sort?: boolean;
}
export declare class Table extends LitElement {
    static get styles(): import('lit').CSSResult[];
    set hasPaginator(value: boolean);
    set data(data: Array<any>);
    set customData(data: Array<any>);
    set customTableHeader(value: Array<ITableColumnHeader>);
    set filters(filters: Array<any>);
    set currentIndex(value: number);
    set pageSize(value: number);
    set pageSizeOptions(pageSizeOptions: string);
    set resultstext(value: string);
    set rowsperpagetext(value: string);
    set textAlign(value: string);
    set headerTitle(value: string);
    set hideHeader(value: boolean);
    set hideColumnHeader(value: boolean);
    set innerFilters(value: boolean);
    set expandTable(value: boolean);
    set expandLabel(value: string);
    set collapseLabel(value: string);
    set rowsOnCollapsed(value: number);
    set filtersLabel(value: string);
    set cleanFiltersLabel(value: string);
    set selectedRowsLabel(value: string);
    set footerButtons(value: number);
    set maxContentWidth(value: boolean);
    set stickyColumns(value: boolean);
    set multiselect(value: boolean);
    set radioselect(value: boolean);
    set hasRowButton(value: boolean);
    set rowButtonLabel(value: string);
    set hasRowActions(value: boolean);
    set rowActionsIcons(icons: Array<string>);
    set footerButtonPrimaryLabel(value: string);
    set footerButtonSecondaryLabel(value: string);
    set footerButtonAlternativeLabel(value: string);
    set enableRowActionsOnDisabled(value: boolean);
    set enableRowActionsOnDeleted(value: boolean);
    set valueMaxLength(value: number);
    private get _tableGridStyle();
    private get _tableHeight();
    private _valueMaxLength;
    private _data;
    private _customData;
    private _pipeData;
    private _customTableHeader;
    private _filters;
    private _tableHeader;
    private _tableHeaderSort;
    private _hasPaginator;
    private _currentIndex;
    private _pageSize;
    private _pageSizeOptions;
    private _resultstext;
    private _rowsperpagetext;
    private _textAlign;
    private _headerTitle;
    private _hideHeader;
    private _hideColumnHeader;
    private _innerFilters;
    private _expandTable;
    private _expandLabel;
    private _collapseLabel;
    private _rowsOnCollapsed;
    private _filtersLabel;
    private _cleanFiltersLabel;
    private _openFiltersLabel;
    private _selectedRowsLabel;
    private _selectAllRows;
    private _noFiltersLabel;
    private _footerButtons;
    private _maxContentWidth;
    private _stickyColumns;
    private _multiselect;
    private _radioselect;
    private _hasRowButton;
    private _rowButtonLabel;
    private _hasRowActions;
    private _rowActionsIcons;
    private _footerButtonPrimaryLabel;
    private _footerButtonSecondaryLabel;
    private _footerButtonAlternativeLabel;
    private _enableRowActionsOnDeleted;
    private _enableRowActionsOnDisabled;
    private _currentSortColumn;
    private _currentSortType;
    private _copyPipeData;
    private _isFirstUpdate;
    private _tablePaginationTag;
    firstUpdated(): Promise<void>;
    willUpdate(changedProperties: any): void;
    private _clickOutside;
    private _createTableHeader;
    private _sortBy;
    private _paginateTable;
    private _generateTableHeaderHTML;
    private _onRowCheckboxChange;
    private _onSelectAllRows;
    private _onRowAction;
    private _onRowActionKeydown;
    private _generateTableTdCheckbox;
    private _generateTableTdRadio;
    private _generateTableTdButton;
    private _generateTableTdActions;
    private _generateTableTdSelfActions;
    private _resetRowsTabIndex;
    private _uncheckRadioRows;
    private _generateDefaultTableBody;
    private _generateCustomTableBody;
    private _generateFilterChips;
    private _clearFilters;
    private _countRowsChecked;
    private _getRowsSelected;
    private _emitExpandAction;
    private _emitOpenFilters;
    private _emitChangeFilters;
    private _emitFooterAction;
    render(): import('lit-html').TemplateResult;
}
