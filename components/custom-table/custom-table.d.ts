import { LitElement } from 'lit';

export interface IFilter {
    value: string;
    icon: string;
}
export interface IColumnHeader {
    column: string;
    label: string;
    style?: string;
    align?: string;
    sortType?: 'number' | 'date' | 'string';
    sortOrder?: 'asc' | 'desc' | 'none';
}
export declare class CustomTable extends LitElement {
    static get styles(): import('lit').CSSResult[];
    private _tableHeaderTag;
    private _tablePaginationTag;
    set hideHeader(value: boolean);
    set hidePaginator(value: boolean);
    set columnsHeader(data: Array<IColumnHeader>);
    set data(data: Array<any>);
    set multiselect(value: boolean);
    set radioselect(value: boolean);
    set selectedRowsLabel(value: string);
    private _hideHeader;
    private _hidePaginator;
    private _columnsHeader;
    private _data;
    private _paginatedData;
    private _currentSortColumn;
    private _currentSortType;
    private _currentSortOrder;
    private _multiselect;
    private _radioselect;
    private _allRowsSelected;
    private _selectedRowsLabel;
    private _isFirstUpdate;
    private _shouldUpdate;
    private get _table();
    set tableTitle(value: string);
    set filters(filters: Array<any>);
    set innerFilters(value: boolean);
    set expandTable(value: boolean);
    set expandLabel(value: string);
    set collapseLabel(value: string);
    set filtersLabel(value: string);
    set cleanFiltersLabel(value: string);
    set noFiltersLabel(value: string);
    set hideHeaderTitleAndExpand(value: boolean);
    private _tableTitle;
    private _filters;
    private _innerFilters;
    private _expandTable;
    private _expandLabel;
    private _collapseLabel;
    private _filtersLabel;
    private _cleanFiltersLabel;
    private _noFiltersLabel;
    private _isTableHeaderCreated;
    private _hideHeaderTitleAndExpand;
    set totalResults(value: number);
    set currentIndex(value: number);
    set pageSize(value: number);
    set pageSizeOptions(pageSizeOptions: Array<number>);
    set resultsLabel(value: string);
    set rowsPerPageLabel(value: string);
    set hidePaginationResults(value: boolean);
    set pageSizeOptionsDisabled(value: boolean);
    private _isPaginationStarted;
    private _totalResults;
    private _currentIndex;
    private _pageSize;
    private _pageSizeOptions;
    private _resultstext;
    private _rowsperpagetext;
    private _paginationState;
    private _pageSizeOptionsDisabled;
    private _hidePaginationResults;
    private _getDataLength;
    private _sortBy;
    private _updateColumnSortState;
    private _onSelectAll;
    private _countRowsChecked;
    private _updateTableHeader;
    private _generateTableHeaderHTML;
    private _getTableHeaderSortIconHTML;
    private _updateTableHeaderIcons;
    private _paginate;
    private _rowKeydownListener;
    private _dispatchChangeFilters;
    private _dispatchExpandTable;
    private _dispatchOpenFilters;
    private _dispatchPagination;
    private _dispatchSort;
    private _dispatchMultiselect;
    firstUpdated(): Promise<void>;
    willUpdate(changedProperties: any): void;
    render(): import('lit-html').TemplateResult;
}
