import { LitElement } from 'lit';

export type SelectorElement = {
    label: string;
    value: string;
};
export declare class InputDropdown extends LitElement {
    static get styles(): import('lit').CSSResult[];
    private get _input();
    private get _label();
    set icon(icon: string);
    set placeHolder(placeHolder: string);
    set unorder(multiple: boolean);
    set elements(elements: Array<SelectorElement>);
    set multiple(multiple: boolean);
    set tick(tick: boolean);
    set openWithSearch(openWithSearch: boolean);
    set showDropdown(state: boolean);
    set deselectable(deselectable: boolean);
    set selectedValue(elements: string[]);
    set type(value: string);
    set boxStyle(boxStyle: string);
    set selectorStyle(style: string);
    set labelSelectAll(labelSelectAll: string);
    set labelDeselectAll(labelDeselectAll: string);
    set selectAll(selectAll: boolean);
    set invalid(invalid: boolean);
    set inputSize(size: string);
    set helpText(text: string);
    set dropdownPlaceholder(placeholder: string);
    set placeholderEmpty(placeholder: string);
    set filterThreshold(value: number);
    set value(value: string);
    private _elements;
    private _copyElements;
    private _tick;
    private _type;
    private _boxStyle;
    private _selectedValue;
    private _multiple;
    private _openWithSearch;
    private _deselectable;
    private _icon;
    private _placeHolder;
    private _showDropdown;
    private _required;
    private _disabled;
    private _readonly;
    private _labelSelectAll;
    private _labelDeselectAll;
    private _selectAll;
    private _selectElements;
    private _isFocused;
    private _helpText;
    private _invalid;
    private _inputSize;
    private _inputValidity;
    private _filteredElements;
    private _dropdownPlaceholder;
    private _selectorStyle;
    private _isFiltering;
    private _placeholderEmpty;
    private _filterThreshold;
    private _unorder;
    _popperInstance: any;
    private observerConfig;
    private callback;
    private observer;
    disconnectedCallback(): void;
    private _getFilteredElements;
    firstUpdated(): Promise<void>;
    private _initElementsSelected;
    private _clickedOutsideDropdown;
    private _handleInput;
    private _handleBlurEsc;
    private _handleBlurSelector;
    private _toggleDropdown;
    private _dispatchValueChange;
    private _onSelectorChanges;
    private _showSelectValuesInInput;
    private _checkInputAttributes;
    private _handleFocusIn;
    private _handleFocusOut;
    private _handleKeyDown;
    private _handleClick;
    private _focusInput;
    private _showPlaceholder;
    private _hidePlaceholder;
    private _handleValidity;
    private _cleanInput;
    private _createPopperDropdown;
    render(): import('lit-html').TemplateResult;
}
