import { LitElement } from 'lit';

export type DssTimepickerOption = {
    value: string;
    state: string;
};
export declare const MONTH: string[];
export declare const WEEK: string[];
export declare class Calendar extends LitElement {
    static get styles(): import('lit').CSSResult[];
    set range(value: boolean);
    set isRangeStartFocused(value: boolean);
    set isRangeEndFocused(value: boolean);
    set selectedDate(selectedDate: string);
    set minDate(minDate: string);
    set maxDate(maxDate: string);
    set showTime(showTime: boolean);
    set showButtons(showButtons: boolean);
    set leftLabel(leftLabel: string);
    set rightLabel(rightLabel: string);
    set timepicker(value: string);
    set minutesRange(value: number);
    set minHour(value: number);
    set maxHour(value: number);
    set customTimeListOptions(options: DssTimepickerOption[]);
    set timepickerLabel(label: string);
    set rangeStartDate(value: string);
    set rangeEndDate(value: string);
    _range: boolean;
    _isRangeStartFocused: boolean;
    _isRangeEndFocused: boolean;
    _rangeStartDate: Date | null;
    _rangeEndDate: Date | null;
    _rangeOverDate: Date | null;
    _timepicker: string;
    _minutesRange: number;
    _minHour: number;
    _maxHour: number;
    _customTimeListOptions: DssTimepickerOption[];
    _timepickerLabel: string;
    _date: Date;
    _currYear: number;
    _currMonth: number;
    _currHour: number | undefined;
    _currMin: number | undefined;
    _days: number[];
    _selectedDate: Date | null;
    _showTime: boolean;
    _showButtons: boolean;
    _leftLabel: string;
    _rightLabel: string;
    _minDate: Date | null;
    _maxDate: Date | null;
    _timepickerValue: string;
    _showMonthSelector: boolean;
    _showYearSelector: boolean;
    _yearsRangeStart: number;
    _yearsRangeEnd: number;
    _isTimeFormatValid: boolean;
    _focusFirstElementHandler: () => void;
    constructor();
    connectedCallback(): void;
    disconnectedCallback(): void;
    _focusFirstElement(): void;
    _prev(): void;
    _next(): void;
    _update(): void;
    _getDays(): number[];
    _isToday(day: number): boolean;
    _isWeekend(day: number): boolean;
    _isInactive(day: number): boolean;
    _isSelected(day: number): boolean;
    _isSelectedRangeStart(day: number): boolean;
    _isSelectedRangeEnd(day: number): boolean;
    _isOverRangeDate(day: number): boolean;
    _compareSelectedRangeDates(): boolean;
    _isBetweenRange(day: number): boolean;
    _isBetweenRangeOnMouseOver(day: number): boolean;
    _selectDate(day: number): void;
    _selectRangeOverDate(day: number): void;
    _removeRangeOverDate(): void;
    _onCancel(): void;
    _onAccept(): void;
    _emitDate(): void;
    _emitRange(): void;
    _updateCurrentDate(): void;
    _getDateString(selectedDate: string): Date | null;
    _onSelectTime(e: CustomEvent): void;
    _toggleMonthSelector(): void;
    _onMonthSelectorClick(month: string): void;
    _toggleYearSelector(): void;
    _onYearSelectorClick(year: number): void;
    _generateYearsRangeOptions(): import('lit-html').TemplateResult[];
    _generateMonthsOptions(): import('lit-html').TemplateResult[];
    _onYearRangeStepUp(): void;
    _onYearRangeStepDown(): void;
    _onHeaderMonthKeyDown(e: KeyboardEvent): void;
    _onHeaderYearKeyDown(e: KeyboardEvent): void;
    _validateSelectedDate(): boolean;
    _handleCalendarKeydown(e: KeyboardEvent): void;
    render(): import('lit-html').TemplateResult;
}
